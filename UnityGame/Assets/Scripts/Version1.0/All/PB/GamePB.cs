// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GamePB.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from GamePB.proto</summary>
public static partial class GamePBReflection {

  #region Descriptor
  /// <summary>File descriptor for GamePB.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GamePBReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxHYW1lUEIucHJvdG8iWQoJTG9naW5QYWNrEhAKCHVzZXJuYW1lGAEgASgJ",
          "EhAKCHBhc3N3b3JkGAIgASgJEhMKC3BsYXllcmluZGV4GAMgASgFEhMKC3Bs",
          "YXllcmxldmVsGAQgASgFIlIKClBsYXllclBhY2sSEgoKcGxheWVyTmFtZRgB",
          "IAEoCRINCgVsZXZlbBgCIAEoBRIKCgJocBgDIAEoBRIVCgNwb3MYBCABKAsy",
          "CC5Qb3NQYWNrIkEKB1Bvc1BhY2sSDAoEUG9zWBgBIAEoAhIMCgRQb3NZGAIg",
          "ASgCEgwKBFBvc1oYAyABKAISDAoEUm90WRgEIAEoAiJLCghSb29tUGFjaxIQ",
          "Cghyb29tbmFtZRgBIAEoCRIOCgZtYXhudW0YAiABKAUSDgoGY3VybnVtGAMg",
          "ASgFEg0KBXN0YXRlGAQgASgFImkKC01pc3Npb25QYWNrEhEKCW1pc3Npb25J",
          "RBgBIAEoBRILCgNkZXMYAiABKAkSDQoFY291bnQYAyABKAUSKwoQbWlzc2lv",
          "bmdvb2RzdHlwZRgEIAEoDjIRLk1pc3Npb25Hb29kc1R5cGUikAEKDUludmVu",
          "dG9yeVBhY2sSEAoIaXRlbU5hbWUYASABKAkSEQoJaXRlbUNvdW50GAIgASgJ",
          "Eg8KB2lzU3RhY2sYAyABKAgSEwoLZGVzY3JpcHRpb24YBCABKAkSIAoIaXRl",
          "bVR5cGUYBSABKA4yDi5JbnZlbnRvcnlUeXBlEhIKCnNwcml0ZU5hbWUYBiAB",
          "KAkirAIKCE1haW5wYWNrEhkKB3JlcXVlc3QYASABKA4yCC5SZXF1ZXN0Eh8K",
          "CmFjdGlvbmNvZGUYAiABKA4yCy5BY3Rpb25Db2RlEhoKB3Jlc3BvbmUYAyAB",
          "KA4yCS5SZXNwb25zZRIdCglsb2dpbnBhY2sYBCABKAsyCi5Mb2dpblBhY2sS",
          "EwoLZGVzY3JpcHRpb24YBSABKAkSHwoKcGxheWVycGFjaxgGIAMoCzILLlBs",
          "YXllclBhY2sSGwoIcm9vbXBhY2sYByADKAsyCS5Sb29tUGFjaxIMCgRVc2Vy",
          "GAggASgJEiEKC21pc3Npb25wYWNrGAkgASgLMgwuTWlzc2lvblBhY2sSJQoN",
          "aW52ZW50b3J5cGFjaxgKIAEoCzIOLkludmVudG9yeVBhY2sqRwoHUmVxdWVz",
          "dBIPCgtSZXF1ZXN0Tm9uZRAAEggKBFVzZXIQARIICgRSb29tEAISCAoER2Ft",
          "ZRADEg0KCUludmVudG9yeRAEKrQDCgpBY3Rpb25Db2RlEg4KCkFjdGlvbk5v",
          "bmUQABIJCgVMb2dpbhABEgwKCFJlZ2lzdGVyEAISDwoLQ2hvc2VQbGF5ZXIQ",
          "AxINCglDaGVja0luZm8QBBIICgRDaGF0EAUSDgoKQ3JlYXRlUm9vbRAGEg4K",
          "ClNlYXJjaFJvb20QBxIMCghKb2luUm9vbRAIEgwKCEV4aXRSb29tEAkSDQoJ",
          "U3RhcnRnYW1lEAoSDQoJQmVnaW5uaW5nEAsSFAoQVXBkYXRlUm9vbVBsYXll",
          "chAMEg8KC1VwZGF0ZVN0YXRlEA0SDAoIRXhpdEdhbWUQDhIUChBVcGRhdGVQ",
          "bGF5ZXJMaXN0EA8SDwoLTWlzc2lvbkNvZGUQEBIPCgtMZXZlbEFjdGlvbhAR",
          "EhEKDUluaXRJbnZlbnRvcnkQEhITCg9SZWZlc2hJbnZlbnRvcnkQExIQCgxH",
          "ZXRJbnZlbnRvcnkQFBIRCg1PcGVyYXRlQWN0b2luEBUSEQoNRW50ZXJHYW1l",
          "Q2l0eRAWEgoKBk9ubGluZRAXEgsKB09mZmxpbmUQGBITCg9HZXRiYWNrTWFp",
          "bmNpdHkQGSpQCghSZXNwb25zZRIPCgtSZXNwb25lTm9uZRAAEgsKB1N1Y2Nl",
          "ZWQQARIKCgZGYWlsZWQQAhINCglOZWVkQ2hvc2UQAxILCgdOb3RSb29tEAQq",
          "SAoQTWlzc2lvbkdvb2RzVHlwZRIICgROb25lEAASDgoKRXhwZXJpZW5jZRAB",
          "EgwKCEdvbGRDb2luEAISDAoITWF0ZXJpYWwQAyo1Cg1JbnZlbnRvcnlUeXBl",
          "EgsKB0RlZmF1bHQQABIICgRGb29kEAESDQoJTWF0ZXJpYWxhEAJiBnByb3Rv",
          "Mw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Request), typeof(global::ActionCode), typeof(global::Response), typeof(global::MissionGoodsType), typeof(global::InventoryType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginPack), global::LoginPack.Parser, new[]{ "Username", "Password", "Playerindex", "Playerlevel" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPack), global::PlayerPack.Parser, new[]{ "PlayerName", "Level", "Hp", "Pos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PosPack), global::PosPack.Parser, new[]{ "PosX", "PosY", "PosZ", "RotY" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomPack), global::RoomPack.Parser, new[]{ "Roomname", "Maxnum", "Curnum", "State" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MissionPack), global::MissionPack.Parser, new[]{ "MissionID", "Des", "Count", "Missiongoodstype" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InventoryPack), global::InventoryPack.Parser, new[]{ "ItemName", "ItemCount", "IsStack", "Description", "ItemType", "SpriteName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Mainpack), global::Mainpack.Parser, new[]{ "Request", "Actioncode", "Respone", "Loginpack", "Description", "Playerpack", "Roompack", "User", "Missionpack", "Inventorypack" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum Request {
  [pbr::OriginalName("RequestNone")] None = 0,
  [pbr::OriginalName("User")] User = 1,
  [pbr::OriginalName("Room")] Room = 2,
  [pbr::OriginalName("Game")] Game = 3,
  [pbr::OriginalName("Inventory")] Inventory = 4,
}

public enum ActionCode {
  [pbr::OriginalName("ActionNone")] ActionNone = 0,
  [pbr::OriginalName("Login")] Login = 1,
  [pbr::OriginalName("Register")] Register = 2,
  [pbr::OriginalName("ChosePlayer")] ChosePlayer = 3,
  [pbr::OriginalName("CheckInfo")] CheckInfo = 4,
  [pbr::OriginalName("Chat")] Chat = 5,
  [pbr::OriginalName("CreateRoom")] CreateRoom = 6,
  [pbr::OriginalName("SearchRoom")] SearchRoom = 7,
  [pbr::OriginalName("JoinRoom")] JoinRoom = 8,
  [pbr::OriginalName("ExitRoom")] ExitRoom = 9,
  [pbr::OriginalName("Startgame")] Startgame = 10,
  [pbr::OriginalName("Beginning")] Beginning = 11,
  [pbr::OriginalName("UpdateRoomPlayer")] UpdateRoomPlayer = 12,
  /// <summary>
  ///状态同步
  /// </summary>
  [pbr::OriginalName("UpdateState")] UpdateState = 13,
  [pbr::OriginalName("ExitGame")] ExitGame = 14,
  [pbr::OriginalName("UpdatePlayerList")] UpdatePlayerList = 15,
  [pbr::OriginalName("MissionCode")] MissionCode = 16,
  [pbr::OriginalName("LevelAction")] LevelAction = 17,
  [pbr::OriginalName("InitInventory")] InitInventory = 18,
  [pbr::OriginalName("RefeshInventory")] RefeshInventory = 19,
  [pbr::OriginalName("GetInventory")] GetInventory = 20,
  [pbr::OriginalName("OperateActoin")] OperateActoin = 21,
  [pbr::OriginalName("EnterGameCity")] EnterGameCity = 22,
  [pbr::OriginalName("Online")] Online = 23,
  [pbr::OriginalName("Offline")] Offline = 24,
  [pbr::OriginalName("GetbackMaincity")] GetbackMaincity = 25,
}

public enum Response {
  [pbr::OriginalName("ResponeNone")] ResponeNone = 0,
  [pbr::OriginalName("Succeed")] Succeed = 1,
  [pbr::OriginalName("Failed")] Failed = 2,
  [pbr::OriginalName("NeedChose")] NeedChose = 3,
  [pbr::OriginalName("NotRoom")] NotRoom = 4,
}

public enum MissionGoodsType {
  [pbr::OriginalName("None")] None = 0,
  [pbr::OriginalName("Experience")] Experience = 1,
  [pbr::OriginalName("GoldCoin")] GoldCoin = 2,
  [pbr::OriginalName("Material")] Material = 3,
}

public enum InventoryType {
  [pbr::OriginalName("Default")] Default = 0,
  [pbr::OriginalName("Food")] Food = 1,
  [pbr::OriginalName("Materiala")] Materiala = 2,
}

#endregion

#region Messages
public sealed partial class LoginPack : pb::IMessage<LoginPack> {
  private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GamePBReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginPack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginPack(LoginPack other) : this() {
    username_ = other.username_;
    password_ = other.password_;
    playerindex_ = other.playerindex_;
    playerlevel_ = other.playerlevel_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginPack Clone() {
    return new LoginPack(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "playerindex" field.</summary>
  public const int PlayerindexFieldNumber = 3;
  private int playerindex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Playerindex {
    get { return playerindex_; }
    set {
      playerindex_ = value;
    }
  }

  /// <summary>Field number for the "playerlevel" field.</summary>
  public const int PlayerlevelFieldNumber = 4;
  private int playerlevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Playerlevel {
    get { return playerlevel_; }
    set {
      playerlevel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginPack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginPack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Password != other.Password) return false;
    if (Playerindex != other.Playerindex) return false;
    if (Playerlevel != other.Playerlevel) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (Playerindex != 0) hash ^= Playerindex.GetHashCode();
    if (Playerlevel != 0) hash ^= Playerlevel.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (Playerindex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Playerindex);
    }
    if (Playerlevel != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Playerlevel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (Playerindex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playerindex);
    }
    if (Playerlevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playerlevel);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginPack other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.Playerindex != 0) {
      Playerindex = other.Playerindex;
    }
    if (other.Playerlevel != 0) {
      Playerlevel = other.Playerlevel;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
        case 24: {
          Playerindex = input.ReadInt32();
          break;
        }
        case 32: {
          Playerlevel = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerPack : pb::IMessage<PlayerPack> {
  private static readonly pb::MessageParser<PlayerPack> _parser = new pb::MessageParser<PlayerPack>(() => new PlayerPack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GamePBReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPack(PlayerPack other) : this() {
    playerName_ = other.playerName_;
    level_ = other.level_;
    hp_ = other.hp_;
    pos_ = other.pos_ != null ? other.pos_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPack Clone() {
    return new PlayerPack(this);
  }

  /// <summary>Field number for the "playerName" field.</summary>
  public const int PlayerNameFieldNumber = 1;
  private string playerName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerName {
    get { return playerName_; }
    set {
      playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 3;
  private int hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 4;
  private global::PosPack pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PosPack Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerName != other.PlayerName) return false;
    if (Level != other.Level) return false;
    if (Hp != other.Hp) return false;
    if (!object.Equals(Pos, other.Pos)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Hp != 0) hash ^= Hp.GetHashCode();
    if (pos_ != null) hash ^= Pos.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerName);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Hp != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Hp);
    }
    if (pos_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Pos);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Hp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
    }
    if (pos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPack other) {
    if (other == null) {
      return;
    }
    if (other.PlayerName.Length != 0) {
      PlayerName = other.PlayerName;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Hp != 0) {
      Hp = other.Hp;
    }
    if (other.pos_ != null) {
      if (pos_ == null) {
        Pos = new global::PosPack();
      }
      Pos.MergeFrom(other.Pos);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerName = input.ReadString();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          Hp = input.ReadInt32();
          break;
        }
        case 34: {
          if (pos_ == null) {
            Pos = new global::PosPack();
          }
          input.ReadMessage(Pos);
          break;
        }
      }
    }
  }

}

public sealed partial class PosPack : pb::IMessage<PosPack> {
  private static readonly pb::MessageParser<PosPack> _parser = new pb::MessageParser<PosPack>(() => new PosPack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PosPack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GamePBReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosPack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosPack(PosPack other) : this() {
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    rotY_ = other.rotY_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PosPack Clone() {
    return new PosPack(this);
  }

  /// <summary>Field number for the "PosX" field.</summary>
  public const int PosXFieldNumber = 1;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "PosY" field.</summary>
  public const int PosYFieldNumber = 2;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "PosZ" field.</summary>
  public const int PosZFieldNumber = 3;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  /// <summary>Field number for the "RotY" field.</summary>
  public const int RotYFieldNumber = 4;
  private float rotY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RotY {
    get { return rotY_; }
    set {
      rotY_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PosPack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PosPack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotY, other.RotY)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
    if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
    if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
    if (RotY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotY);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PosX != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(PosZ);
    }
    if (RotY != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(RotY);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (RotY != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PosPack other) {
    if (other == null) {
      return;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    if (other.RotY != 0F) {
      RotY = other.RotY;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          PosX = input.ReadFloat();
          break;
        }
        case 21: {
          PosY = input.ReadFloat();
          break;
        }
        case 29: {
          PosZ = input.ReadFloat();
          break;
        }
        case 37: {
          RotY = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomPack : pb::IMessage<RoomPack> {
  private static readonly pb::MessageParser<RoomPack> _parser = new pb::MessageParser<RoomPack>(() => new RoomPack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomPack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GamePBReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomPack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomPack(RoomPack other) : this() {
    roomname_ = other.roomname_;
    maxnum_ = other.maxnum_;
    curnum_ = other.curnum_;
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomPack Clone() {
    return new RoomPack(this);
  }

  /// <summary>Field number for the "roomname" field.</summary>
  public const int RoomnameFieldNumber = 1;
  private string roomname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Roomname {
    get { return roomname_; }
    set {
      roomname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "maxnum" field.</summary>
  public const int MaxnumFieldNumber = 2;
  private int maxnum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Maxnum {
    get { return maxnum_; }
    set {
      maxnum_ = value;
    }
  }

  /// <summary>Field number for the "curnum" field.</summary>
  public const int CurnumFieldNumber = 3;
  private int curnum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Curnum {
    get { return curnum_; }
    set {
      curnum_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private int state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomPack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomPack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Roomname != other.Roomname) return false;
    if (Maxnum != other.Maxnum) return false;
    if (Curnum != other.Curnum) return false;
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Roomname.Length != 0) hash ^= Roomname.GetHashCode();
    if (Maxnum != 0) hash ^= Maxnum.GetHashCode();
    if (Curnum != 0) hash ^= Curnum.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Roomname.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Roomname);
    }
    if (Maxnum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Maxnum);
    }
    if (Curnum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Curnum);
    }
    if (State != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Roomname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomname);
    }
    if (Maxnum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxnum);
    }
    if (Curnum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curnum);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomPack other) {
    if (other == null) {
      return;
    }
    if (other.Roomname.Length != 0) {
      Roomname = other.Roomname;
    }
    if (other.Maxnum != 0) {
      Maxnum = other.Maxnum;
    }
    if (other.Curnum != 0) {
      Curnum = other.Curnum;
    }
    if (other.State != 0) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Roomname = input.ReadString();
          break;
        }
        case 16: {
          Maxnum = input.ReadInt32();
          break;
        }
        case 24: {
          Curnum = input.ReadInt32();
          break;
        }
        case 32: {
          State = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MissionPack : pb::IMessage<MissionPack> {
  private static readonly pb::MessageParser<MissionPack> _parser = new pb::MessageParser<MissionPack>(() => new MissionPack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MissionPack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GamePBReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MissionPack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MissionPack(MissionPack other) : this() {
    missionID_ = other.missionID_;
    des_ = other.des_;
    count_ = other.count_;
    missiongoodstype_ = other.missiongoodstype_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MissionPack Clone() {
    return new MissionPack(this);
  }

  /// <summary>Field number for the "missionID" field.</summary>
  public const int MissionIDFieldNumber = 1;
  private int missionID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MissionID {
    get { return missionID_; }
    set {
      missionID_ = value;
    }
  }

  /// <summary>Field number for the "des" field.</summary>
  public const int DesFieldNumber = 2;
  private string des_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Des {
    get { return des_; }
    set {
      des_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 3;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "missiongoodstype" field.</summary>
  public const int MissiongoodstypeFieldNumber = 4;
  private global::MissionGoodsType missiongoodstype_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MissionGoodsType Missiongoodstype {
    get { return missiongoodstype_; }
    set {
      missiongoodstype_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MissionPack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MissionPack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MissionID != other.MissionID) return false;
    if (Des != other.Des) return false;
    if (Count != other.Count) return false;
    if (Missiongoodstype != other.Missiongoodstype) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MissionID != 0) hash ^= MissionID.GetHashCode();
    if (Des.Length != 0) hash ^= Des.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Missiongoodstype != 0) hash ^= Missiongoodstype.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MissionID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MissionID);
    }
    if (Des.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Des);
    }
    if (Count != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Count);
    }
    if (Missiongoodstype != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Missiongoodstype);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MissionID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionID);
    }
    if (Des.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Des);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (Missiongoodstype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Missiongoodstype);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MissionPack other) {
    if (other == null) {
      return;
    }
    if (other.MissionID != 0) {
      MissionID = other.MissionID;
    }
    if (other.Des.Length != 0) {
      Des = other.Des;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Missiongoodstype != 0) {
      Missiongoodstype = other.Missiongoodstype;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MissionID = input.ReadInt32();
          break;
        }
        case 18: {
          Des = input.ReadString();
          break;
        }
        case 24: {
          Count = input.ReadInt32();
          break;
        }
        case 32: {
          Missiongoodstype = (global::MissionGoodsType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class InventoryPack : pb::IMessage<InventoryPack> {
  private static readonly pb::MessageParser<InventoryPack> _parser = new pb::MessageParser<InventoryPack>(() => new InventoryPack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InventoryPack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GamePBReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InventoryPack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InventoryPack(InventoryPack other) : this() {
    itemName_ = other.itemName_;
    itemCount_ = other.itemCount_;
    isStack_ = other.isStack_;
    description_ = other.description_;
    itemType_ = other.itemType_;
    spriteName_ = other.spriteName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InventoryPack Clone() {
    return new InventoryPack(this);
  }

  /// <summary>Field number for the "itemName" field.</summary>
  public const int ItemNameFieldNumber = 1;
  private string itemName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ItemName {
    get { return itemName_; }
    set {
      itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "itemCount" field.</summary>
  public const int ItemCountFieldNumber = 2;
  private string itemCount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ItemCount {
    get { return itemCount_; }
    set {
      itemCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isStack" field.</summary>
  public const int IsStackFieldNumber = 3;
  private bool isStack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsStack {
    get { return isStack_; }
    set {
      isStack_ = value;
    }
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private string description_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "itemType" field.</summary>
  public const int ItemTypeFieldNumber = 5;
  private global::InventoryType itemType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InventoryType ItemType {
    get { return itemType_; }
    set {
      itemType_ = value;
    }
  }

  /// <summary>Field number for the "spriteName" field.</summary>
  public const int SpriteNameFieldNumber = 6;
  private string spriteName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SpriteName {
    get { return spriteName_; }
    set {
      spriteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InventoryPack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InventoryPack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ItemName != other.ItemName) return false;
    if (ItemCount != other.ItemCount) return false;
    if (IsStack != other.IsStack) return false;
    if (Description != other.Description) return false;
    if (ItemType != other.ItemType) return false;
    if (SpriteName != other.SpriteName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ItemName.Length != 0) hash ^= ItemName.GetHashCode();
    if (ItemCount.Length != 0) hash ^= ItemCount.GetHashCode();
    if (IsStack != false) hash ^= IsStack.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    if (ItemType != 0) hash ^= ItemType.GetHashCode();
    if (SpriteName.Length != 0) hash ^= SpriteName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ItemName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ItemName);
    }
    if (ItemCount.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ItemCount);
    }
    if (IsStack != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsStack);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (ItemType != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) ItemType);
    }
    if (SpriteName.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(SpriteName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ItemName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemName);
    }
    if (ItemCount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemCount);
    }
    if (IsStack != false) {
      size += 1 + 1;
    }
    if (Description.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (ItemType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
    }
    if (SpriteName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SpriteName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InventoryPack other) {
    if (other == null) {
      return;
    }
    if (other.ItemName.Length != 0) {
      ItemName = other.ItemName;
    }
    if (other.ItemCount.Length != 0) {
      ItemCount = other.ItemCount;
    }
    if (other.IsStack != false) {
      IsStack = other.IsStack;
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    if (other.ItemType != 0) {
      ItemType = other.ItemType;
    }
    if (other.SpriteName.Length != 0) {
      SpriteName = other.SpriteName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ItemName = input.ReadString();
          break;
        }
        case 18: {
          ItemCount = input.ReadString();
          break;
        }
        case 24: {
          IsStack = input.ReadBool();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
        case 40: {
          ItemType = (global::InventoryType) input.ReadEnum();
          break;
        }
        case 50: {
          SpriteName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Mainpack : pb::IMessage<Mainpack> {
  private static readonly pb::MessageParser<Mainpack> _parser = new pb::MessageParser<Mainpack>(() => new Mainpack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Mainpack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GamePBReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Mainpack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Mainpack(Mainpack other) : this() {
    request_ = other.request_;
    actioncode_ = other.actioncode_;
    respone_ = other.respone_;
    loginpack_ = other.loginpack_ != null ? other.loginpack_.Clone() : null;
    description_ = other.description_;
    playerpack_ = other.playerpack_.Clone();
    roompack_ = other.roompack_.Clone();
    user_ = other.user_;
    missionpack_ = other.missionpack_ != null ? other.missionpack_.Clone() : null;
    inventorypack_ = other.inventorypack_ != null ? other.inventorypack_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Mainpack Clone() {
    return new Mainpack(this);
  }

  /// <summary>Field number for the "request" field.</summary>
  public const int RequestFieldNumber = 1;
  private global::Request request_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Request Request {
    get { return request_; }
    set {
      request_ = value;
    }
  }

  /// <summary>Field number for the "actioncode" field.</summary>
  public const int ActioncodeFieldNumber = 2;
  private global::ActionCode actioncode_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActionCode Actioncode {
    get { return actioncode_; }
    set {
      actioncode_ = value;
    }
  }

  /// <summary>Field number for the "respone" field.</summary>
  public const int ResponeFieldNumber = 3;
  private global::Response respone_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Response Respone {
    get { return respone_; }
    set {
      respone_ = value;
    }
  }

  /// <summary>Field number for the "loginpack" field.</summary>
  public const int LoginpackFieldNumber = 4;
  private global::LoginPack loginpack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LoginPack Loginpack {
    get { return loginpack_; }
    set {
      loginpack_ = value;
    }
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 5;
  private string description_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "playerpack" field.</summary>
  public const int PlayerpackFieldNumber = 6;
  private static readonly pb::FieldCodec<global::PlayerPack> _repeated_playerpack_codec
      = pb::FieldCodec.ForMessage(50, global::PlayerPack.Parser);
  private readonly pbc::RepeatedField<global::PlayerPack> playerpack_ = new pbc::RepeatedField<global::PlayerPack>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerPack> Playerpack {
    get { return playerpack_; }
  }

  /// <summary>Field number for the "roompack" field.</summary>
  public const int RoompackFieldNumber = 7;
  private static readonly pb::FieldCodec<global::RoomPack> _repeated_roompack_codec
      = pb::FieldCodec.ForMessage(58, global::RoomPack.Parser);
  private readonly pbc::RepeatedField<global::RoomPack> roompack_ = new pbc::RepeatedField<global::RoomPack>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomPack> Roompack {
    get { return roompack_; }
  }

  /// <summary>Field number for the "User" field.</summary>
  public const int UserFieldNumber = 8;
  private string user_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string User {
    get { return user_; }
    set {
      user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "missionpack" field.</summary>
  public const int MissionpackFieldNumber = 9;
  private global::MissionPack missionpack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MissionPack Missionpack {
    get { return missionpack_; }
    set {
      missionpack_ = value;
    }
  }

  /// <summary>Field number for the "inventorypack" field.</summary>
  public const int InventorypackFieldNumber = 10;
  private global::InventoryPack inventorypack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InventoryPack Inventorypack {
    get { return inventorypack_; }
    set {
      inventorypack_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Mainpack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Mainpack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Request != other.Request) return false;
    if (Actioncode != other.Actioncode) return false;
    if (Respone != other.Respone) return false;
    if (!object.Equals(Loginpack, other.Loginpack)) return false;
    if (Description != other.Description) return false;
    if(!playerpack_.Equals(other.playerpack_)) return false;
    if(!roompack_.Equals(other.roompack_)) return false;
    if (User != other.User) return false;
    if (!object.Equals(Missionpack, other.Missionpack)) return false;
    if (!object.Equals(Inventorypack, other.Inventorypack)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Request != 0) hash ^= Request.GetHashCode();
    if (Actioncode != 0) hash ^= Actioncode.GetHashCode();
    if (Respone != 0) hash ^= Respone.GetHashCode();
    if (loginpack_ != null) hash ^= Loginpack.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    hash ^= playerpack_.GetHashCode();
    hash ^= roompack_.GetHashCode();
    if (User.Length != 0) hash ^= User.GetHashCode();
    if (missionpack_ != null) hash ^= Missionpack.GetHashCode();
    if (inventorypack_ != null) hash ^= Inventorypack.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Request != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Request);
    }
    if (Actioncode != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Actioncode);
    }
    if (Respone != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Respone);
    }
    if (loginpack_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Loginpack);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Description);
    }
    playerpack_.WriteTo(output, _repeated_playerpack_codec);
    roompack_.WriteTo(output, _repeated_roompack_codec);
    if (User.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(User);
    }
    if (missionpack_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Missionpack);
    }
    if (inventorypack_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(Inventorypack);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Request != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Request);
    }
    if (Actioncode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Actioncode);
    }
    if (Respone != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Respone);
    }
    if (loginpack_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loginpack);
    }
    if (Description.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    size += playerpack_.CalculateSize(_repeated_playerpack_codec);
    size += roompack_.CalculateSize(_repeated_roompack_codec);
    if (User.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
    }
    if (missionpack_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Missionpack);
    }
    if (inventorypack_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inventorypack);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Mainpack other) {
    if (other == null) {
      return;
    }
    if (other.Request != 0) {
      Request = other.Request;
    }
    if (other.Actioncode != 0) {
      Actioncode = other.Actioncode;
    }
    if (other.Respone != 0) {
      Respone = other.Respone;
    }
    if (other.loginpack_ != null) {
      if (loginpack_ == null) {
        Loginpack = new global::LoginPack();
      }
      Loginpack.MergeFrom(other.Loginpack);
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    playerpack_.Add(other.playerpack_);
    roompack_.Add(other.roompack_);
    if (other.User.Length != 0) {
      User = other.User;
    }
    if (other.missionpack_ != null) {
      if (missionpack_ == null) {
        Missionpack = new global::MissionPack();
      }
      Missionpack.MergeFrom(other.Missionpack);
    }
    if (other.inventorypack_ != null) {
      if (inventorypack_ == null) {
        Inventorypack = new global::InventoryPack();
      }
      Inventorypack.MergeFrom(other.Inventorypack);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Request = (global::Request) input.ReadEnum();
          break;
        }
        case 16: {
          Actioncode = (global::ActionCode) input.ReadEnum();
          break;
        }
        case 24: {
          Respone = (global::Response) input.ReadEnum();
          break;
        }
        case 34: {
          if (loginpack_ == null) {
            Loginpack = new global::LoginPack();
          }
          input.ReadMessage(Loginpack);
          break;
        }
        case 42: {
          Description = input.ReadString();
          break;
        }
        case 50: {
          playerpack_.AddEntriesFrom(input, _repeated_playerpack_codec);
          break;
        }
        case 58: {
          roompack_.AddEntriesFrom(input, _repeated_roompack_codec);
          break;
        }
        case 66: {
          User = input.ReadString();
          break;
        }
        case 74: {
          if (missionpack_ == null) {
            Missionpack = new global::MissionPack();
          }
          input.ReadMessage(Missionpack);
          break;
        }
        case 82: {
          if (inventorypack_ == null) {
            Inventorypack = new global::InventoryPack();
          }
          input.ReadMessage(Inventorypack);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
